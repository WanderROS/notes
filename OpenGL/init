opengl steps 

GLFW
1. initializing GLFW header
#include <GL/glfw.h> 
//defines all the constants, types and function propotypes, and default includes opengl and glu head files
// default include gl.h, if use gl3.h define GLFW_INCLUDE_GL3 before the inclusion of GLFW header
// default include glu.h , define GLFW_NO_GLU to avoid this

2. initializing GLFW
int glfwInit(void) //return GL_TRUE | GL_FALSE
// init the parts of GLFW that are not dependent on a window, as threading, timer, and joystick input

void glfwTerminate(void) 
// at the end of GLFW program, called to end using GLFW
//release resources

3. Opening an opengl window
int glfwOpenWindow(int width, int height, int redbits, int greenbits, int bluebits, int alphabits, int depthbits, int stencilbits, int mode) return GL_TRUE | GL_FALSE
// windows' dimensions in pixels
// color and alpha buffer bit depth
// depth buffer(Z-buffer) bit depth
// stencil buffer bit depth
// whether to use fullsceen or windowed mode
mode: GLFW_FULLSCREEN | GLFW_WINDOW

void glfwCloswWindow(void) 
//close the window
// no need to call glfwInit() again


4. using keyboard input
int glfwGetkey(int key)
他绑定了指定键，可监视指定的按键
参数可以是指定字符，或者一个按键ID(GLFW_KEY_ESC)
need to poll input event in a regular baisi, done in two ways
   implicitly by calling glfwSwapBuffers often
   explicitly by calling glfwPollEvents often, 10-100 per second 

glfwSwapBuffers // swap front and back rendering buffers every animation frame anyway.
glfwClear(int buffer)
***********************************************************************************
Window Operations
1. setting window properties
void glfwOpenWindow(int target, int hint)
//this must be called before glfwOpenWindow function
//used to specific minimum opengl version, multisampling anti-aliasingm an accumulation buffer, stereo renderig and more

void glfwSetWindowTitle(const char *title)
void glfwSetWindowSize(int width, int height)
void glfwSetWindowPos(int x, inty)

2. get window properties
int glfwGetWindowParam(int param)
void glfwSetWindowSizeCallback(GLFWwindowfun cbfu);
//call cbfu each time the window is resized
// and cbfun should be 
void GLFWCALL fun(int width, int height)

void glfwGetWindowSize(int *width, int *height)

3. buffer swapping
// glfw windows are always double buffered. two rendering buffers: a front and a back buffer.
// front: is displayed
// back: not displayed
// you can select which buffer to render (use glDrawBuffer command)
// the default rendering buffer is back buffer
// avoid flickering and artifacts
// swap the back and front buffers when an entire frame has been renderd to the back buffer
void glfwSwapBuffer(void)
// after swapping front and back, glfwSwapBuffers call glfwPollEvents by default(ensure frequent polling of events, keyboard, mouse, window resharp)

void glfwSwapInterval(int interval)
// when the swap will occur
// after glfwSwapBuffers is called, wait for interval for real swap
// interval == 1 gives better visual quality

4. querying video modes
// get supported vidwo modes
int glfwGetVideoModes(GLFWvidmode *list, int maxcount) return mode numbers up to maxcount
// list is a vector of GLFWvidmode structure
typedef struct {
    int Width, Height;
    int RedBits;
    int GreenBits;
    int BlueBit;
}GLFWvidmode;
eg. 
int nummodes;
GLFWvidmode list[200];
nummodes = glfwGetVideoModes(list, 200)
the returned list is sorted, first bu color depth(Red, Green, Blue), then by resolution(w, h), the lowest resolution, fewest bits per pixel mode first

void glfwGetDesktopMode(GLFWvimode *mode)
// get the desktop video mode

4. input handling(keyboard, mouse, joystick, using polling or callback)
//keyboard and mouse input is collected by checking for input event
//one exception is when an application is updating its view only response to input
// glfwWaitEvents blocks the calling thread until an event arrives
// glfwSetWindowRefreshCallback is alse useful for such exception, especially on unbuffer window system
// call glfwDisable with GLFW_AUTO_POLL_EVENTS to disable glfwSwapBuffers call glfwPollEvents implicitly
// joystick input is not needed, all joystick state is gathered every time a joystick functions is called

2. Keyboard input
three mechanisms for getting keyboard input
1) manually polling the state of individual keys
2) automatically receive new key state for any key, using a callback function
3) automatically receive characters, using a callback function(function keys, cursor keys and modifiers keys are not reported to the character callback function)

2.1 key state
int glfwGetKey(int key) return GLFW_PRESS(1) if held down or GLFW_RELEASE(0) if not held down
// check if a key is held down or not at any time
glfwEnable(GLFW_STICK_KEYS)
glfwDisable(GLFW_STICK_KEYS)
// stick key , when enabledm a key will not be released until it is checked with glfwGetKey.
// shouled be used in most cases where glfwGetKey is used.
// disable it before levaing a section

void glfwSetKeyCallback(GLFWkeyfun cbfun)
cbfun(int key_identifier, int key_stat(GLFW_PRESS | GLFW_RELEASE))
// unregister a callback function
set fun = NULL


2.2 character input (kyeboard is used as a text input device)
void glfwSetCharCallback(GLFWcharfun cbfun)
cbfun(int Unicode_code_input, int GLFW_PRESS if the key generated the char was pressed | GLFW_RELEASED if release)
set fun = NU::
// unregister a callback

2.3 key repeat
glfwEnable(GLFW_KEY_REPEAT) 
// when a key is held down, repeat it 

2.4 system keys(as alt+tab and more)
glfwDisable(GLFW_SYSZTEM_KEYS)
glfwEnable(GFLW_SYSTEM_KEYS)
// most system keys will have no effect 

3. Mouse input
3.1 mouse position
void glfwGetMousePos(int *x, int *y)
// only reposts the final position after cursor movement
// x, y relative to the 

void glfwSetMousePosCallback(GLFWmouseposfun cbcun)
cbfun(int x, int y)
// report every movement

3.2 mouse buttons
int glfwGetMouseButtoan(int button) return GLFW_PRESS | GFLW_RELEASE
// button can be GLFW_MOUSE_BUTTON_1 through GLFW_MOUSE_BUTTON_8 or .._LEFT, .._RIGHT, .._MIDDLE
glfwEnable(GLFW_STICK_MOUSE_BUTTONS)
glfwDisable(...)

void glfwSetMouseButtonCallback(GLFWmousebuttonfun fun)
fun(int button_identifier, int GLFW_PRESS|GLFW_RELEASE)

3.3 Mouse wheel
int glfwGetMouseWhell(void)
// when is window is opend, GLFW set the position to zero
void glfwSetMouseWhellCallback(GLFWmousewhelfun fun)
fun(int position)

3.4 hiding the mouse cursor
glfwDisable(GLFW_MOUSE_CURSOR)
glfwEnable(GLFW_MOUSE_CURSOR)
// three effects
// the cursor becomes invisiable
// the cursor is guraranteed to be confined to the window
// mouse coordiantes are not limited to the window size

4.4 joystick input
// does not have to be called in order for joystick state to be updated
4.4.1 first it's necessary to determine if a joystick is connected and what its capabilities are. 
int glfwGetJoysticjParam(int joy, int param)
// joy specifies which joystick to retrieve the parameter from, and it should be GLFW_JOYSTICK_n, 1<=n<=16. param specifies which parameter to retrieve. 
// to determine if a joystick is connected, param should be GLFW_PRESENT, which will cause the function to return GL_TRUE. 
// to determine the number of axes or buttons that are supported by the joystick, param should be GLFW_AXES or GLFW_BUTTONS, 

int glfwGetJoystickPos(int joy, float *pos, int numaxes) return the real number of axes the were return ed
// get the current axis position of the joystick
// numaxes specifies how many axes to return position for, pos specifies an array in which they are stored. 
// the position of an axis can be arrange -1.0 to 1.0, 
// positive represent right, forward or up directions, 
// negative represent left, back, or down directions
// if a requested axis is not supported by the joystick, the array element will be set to zero. the same goes for the situation when the joystick is not connected(all axes are treated as unsupported)

4.4.3 joystick buttons
int glfwGetJoyStickButtons(int joy, unsigned char *buttons, int numbuttons) return the state of joystick buttons. 
// each button in the array can be either GLFW_PRESS | GLFW_RELEASE. unsupported buttons will have the value GLFW_RELEASE



5. Timing
5.1 high resolution timer
double glfwGetTime(void)
// reports the number of seconds since glfwInit was called

void glfwSetTime(double time)
// set the value of the high precision timer

5.2 sleep
void glfwSleep(double time)
minimum sleep time 5-20ms


6. image and texture import 
6.1 texture loading
int flgwLoadTexture2D(const char *name, int flags)
// reads a 2D image from a Truevision Targa format file(.TGA) with the name given by name, and uploads it to texture memory. 
// flags used to control how the texture is loaded. if flags is GLFW_ALPHA_MAP_BIT, then any gray scale images will be loaded as alpha maps rather than luminance maps
// load to openGL texture memory

6.2 image loading
load image into client memory
int glfwReadImage(const char *name, GLFWimage *img, int flags) return GL_TRUE | GL_FALSE
// after success, store the information and pixel data in the GLFWimge struct img.
typedef struct {
   int Width, Height;
   int Foramt;
   int BytesPerPixel;
   unsigned char *Data; //point to the loaded pixel data. 
}GLFWimage;
// flags: GLFW_ORIGIN_UL_BIT, GLFW_NO_RESCALE_BIT and GLFW_ALPHA_MAP_BIT, GLFW_ORIGIN_UL_BIT abd GLFW_ALPHA_MAP_BIT

void glfwFreeImage(GLFWimag *img)
// free the allocated memory


7. opengl extension support
extension define
1) an extension name
2) new opengl tokens
3) new opengl functions
to use certain extension, following steps must be performed
1) a compile time check for the support of the extension
2) a run time check for the support of the extension
3) fetch function pointers for the extended opengl functions(done at run time)

8 multi -thread
8.3 creating threads
GLFWthread glfwCreateThread(GLFWthreadfun fun, void *arg) return thread id
int glfwWaitThread(GLFWthread ID, int waitmode)
// waitmode 
// GLFW_NOWAIT , return immediately with GL_TRUE(died) | GL_FALSE(still alive)
// GLFW_AIT

void glfwDestoryThread(FLFWthread ID)

8.4 data sharing using mutex objects
GLFWmutex glfwCreateMutex(void)
// create a mutex object
void glfwDestoryMutex(GLFWmutex mutex)
void glfwLockMutex(GLFWmutex mutex)
void glfwUnlockMutex(GLFWmutex mutex)

8.5 thread synchronization using condition varibables
GLFW supports three condition variable operations: wait, signal and broadcast. 
GLFWcond glfwCreateCond(void)
void glfwDestoryCond(GLFWcond cond)
void glfwWaitCond(GLFWcond cond, GLFWmutex mutex, double timeout)
// timeout GLFW_INFINITY
void glfwSignalCond(GLFWcond cond)
void glfwBroadcastCond(GLFWcond cond)

8.6 call glfw functions from multiple threads(not 100% thread safe)
//thread safe API
1) all functions that deal with threas, mutexes, condition variables
2) timing function glfwSleep




























