C++11
 Core language usability enhancements
===============================
Initializer lists
---------------------
* classes including standard containers like std::vector can use initializer-lists
* initializer-list is a real type
* C++11 binds the concept to a template, called std::initializer_list. This allows constructors and other functions to take initializer-lists as parameters.
class SequenceClass {
public: 
    SequenceClass(std::initializer_list<int> list);
};
SequenceClass some_var = {1, 4, 5, 6};    
* An initializer list is constant; its members cannot be changed once the initializer lis tis created, nor can the data in in those members be changed.

Uniform Initialization
------------------------------
struct AltStruct {
    AltStruct(int x, double y) : x_{x}, y_{y} {}
 
private:
    int x_;
    double y_;
};
AltStruct var2{2, 4.3};

struct IdString {
    std::string name;
    int identifier;
};
 
IdString get_string() {
    return {"foo", 42}; //Note the lack of explicit type.
}


Lambda functions and expressions
-------------------------------------------------
[](int x, int y){}
return type is implicit[内隐的]

[capture](parameters)->return-type{body}
if no parameters, the parentheses can be omitted.
the return type can often be omitted, if the body consists only of one return statement or the return type if void.
[capture](parameter){body}
[](int x, int y)->int {retirn z;}

* A lambda function can refer to identifiers declared outside the lambda function.The set of these variables is commonly called a closure. Closures are defined between square brackets in the declaration of lambda expression. the mechanism allows these variables to be captured by value or by reference. 
[]     // no variables defined. attempting to use any external variables in the lambda is an error
[x, &y]  // x iscaptured by value, y is captured by reference
[&] //any externa; variable is implicitly captured by reference if used
[=] //anu external variable is implicitily captured by value if used
[&, x] //x is explicitly captured by value. other variables will be captured by reference
[=, &z] //z is explicitlu capturd by reference. other variables will be captured by value
* storing anonymous functions in variables, vectors, and arrays; and passing them as named parameters;
#include <functional>
#include <vector>
#include <isostream>

double eval(std::function<double(double)> f, double x = 2.0) {return f(x);}
int main() {
    std::function<double(double)> f0 = [](double x){return 1;}
    auto f1 = [] (double x){return x};
    decltype(f0) fa[3] = {f0, f1,[](double x){return x * x;}};
